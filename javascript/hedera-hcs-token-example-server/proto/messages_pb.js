// source: messages.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Approve', null, global);
goog.exportSymbol('proto.Burn', null, global);
goog.exportSymbol('proto.Construct', null, global);
goog.exportSymbol('proto.DecreaseAllowance', null, global);
goog.exportSymbol('proto.IncreaseAllowance', null, global);
goog.exportSymbol('proto.Join', null, global);
goog.exportSymbol('proto.Mint', null, global);
goog.exportSymbol('proto.MintTo', null, global);
goog.exportSymbol('proto.Primitive', null, global);
goog.exportSymbol('proto.Primitive.PrimitiveCase', null, global);
goog.exportSymbol('proto.PrimitiveHeader', null, global);
goog.exportSymbol('proto.Transfer', null, global);
goog.exportSymbol('proto.TransferFrom', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Construct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Construct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Construct.displayName = 'proto.Construct';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Mint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mint.displayName = 'proto.Mint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MintTo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MintTo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MintTo.displayName = 'proto.MintTo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Transfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Transfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Transfer.displayName = 'proto.Transfer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Approve = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Approve, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Approve.displayName = 'proto.Approve';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IncreaseAllowance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IncreaseAllowance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IncreaseAllowance.displayName = 'proto.IncreaseAllowance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DecreaseAllowance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DecreaseAllowance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DecreaseAllowance.displayName = 'proto.DecreaseAllowance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransferFrom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransferFrom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TransferFrom.displayName = 'proto.TransferFrom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Burn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Burn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Burn.displayName = 'proto.Burn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Join = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Join, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Join.displayName = 'proto.Join';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PrimitiveHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PrimitiveHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PrimitiveHeader.displayName = 'proto.PrimitiveHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Primitive = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Primitive.oneofGroups_);
};
goog.inherits(proto.Primitive, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Primitive.displayName = 'proto.Primitive';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Construct.prototype.toObject = function(opt_includeInstance) {
  return proto.Construct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Construct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Construct.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
    decimals: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Construct}
 */
proto.Construct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Construct;
  return proto.Construct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Construct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Construct}
 */
proto.Construct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDecimals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Construct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Construct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Construct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Construct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Construct.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Construct} returns this
 */
proto.Construct.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.Construct.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Construct} returns this
 */
proto.Construct.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 decimals = 3;
 * @return {number}
 */
proto.Construct.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Construct} returns this
 */
proto.Construct.prototype.setDecimals = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mint.prototype.toObject = function(opt_includeInstance) {
  return proto.Mint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mint.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mint}
 */
proto.Mint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mint;
  return proto.Mint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mint}
 */
proto.Mint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.Mint.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Mint} returns this
 */
proto.Mint.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 quantity = 3;
 * @return {number}
 */
proto.Mint.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Mint} returns this
 */
proto.Mint.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MintTo.prototype.toObject = function(opt_includeInstance) {
  return proto.MintTo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MintTo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MintTo.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MintTo}
 */
proto.MintTo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MintTo;
  return proto.MintTo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MintTo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MintTo}
 */
proto.MintTo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MintTo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MintTo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MintTo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MintTo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.MintTo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.MintTo} returns this
 */
proto.MintTo.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 quantity = 2;
 * @return {number}
 */
proto.MintTo.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MintTo} returns this
 */
proto.MintTo.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Transfer.prototype.toObject = function(opt_includeInstance) {
  return proto.Transfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Transfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Transfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    toAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Transfer}
 */
proto.Transfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Transfer;
  return proto.Transfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Transfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Transfer}
 */
proto.Transfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Transfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Transfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Transfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Transfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string to_address = 1;
 * @return {string}
 */
proto.Transfer.prototype.getToAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Transfer} returns this
 */
proto.Transfer.prototype.setToAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 quantity = 2;
 * @return {number}
 */
proto.Transfer.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Transfer} returns this
 */
proto.Transfer.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Approve.prototype.toObject = function(opt_includeInstance) {
  return proto.Approve.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Approve} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Approve.toObject = function(includeInstance, msg) {
  var f, obj = {
    spender: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Approve}
 */
proto.Approve.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Approve;
  return proto.Approve.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Approve} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Approve}
 */
proto.Approve.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpender(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Approve.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Approve.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Approve} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Approve.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpender();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string spender = 1;
 * @return {string}
 */
proto.Approve.prototype.getSpender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Approve} returns this
 */
proto.Approve.prototype.setSpender = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 amount = 2;
 * @return {number}
 */
proto.Approve.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Approve} returns this
 */
proto.Approve.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IncreaseAllowance.prototype.toObject = function(opt_includeInstance) {
  return proto.IncreaseAllowance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IncreaseAllowance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IncreaseAllowance.toObject = function(includeInstance, msg) {
  var f, obj = {
    spender: jspb.Message.getFieldWithDefault(msg, 1, ""),
    addedValue: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IncreaseAllowance}
 */
proto.IncreaseAllowance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IncreaseAllowance;
  return proto.IncreaseAllowance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IncreaseAllowance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IncreaseAllowance}
 */
proto.IncreaseAllowance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpender(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAddedValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IncreaseAllowance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IncreaseAllowance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IncreaseAllowance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IncreaseAllowance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpender();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddedValue();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string spender = 1;
 * @return {string}
 */
proto.IncreaseAllowance.prototype.getSpender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.IncreaseAllowance} returns this
 */
proto.IncreaseAllowance.prototype.setSpender = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 added_value = 2;
 * @return {number}
 */
proto.IncreaseAllowance.prototype.getAddedValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.IncreaseAllowance} returns this
 */
proto.IncreaseAllowance.prototype.setAddedValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DecreaseAllowance.prototype.toObject = function(opt_includeInstance) {
  return proto.DecreaseAllowance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DecreaseAllowance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DecreaseAllowance.toObject = function(includeInstance, msg) {
  var f, obj = {
    spender: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subtractedValue: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DecreaseAllowance}
 */
proto.DecreaseAllowance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DecreaseAllowance;
  return proto.DecreaseAllowance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DecreaseAllowance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DecreaseAllowance}
 */
proto.DecreaseAllowance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpender(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubtractedValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DecreaseAllowance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DecreaseAllowance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DecreaseAllowance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DecreaseAllowance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpender();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubtractedValue();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string spender = 1;
 * @return {string}
 */
proto.DecreaseAllowance.prototype.getSpender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DecreaseAllowance} returns this
 */
proto.DecreaseAllowance.prototype.setSpender = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 subtracted_value = 2;
 * @return {number}
 */
proto.DecreaseAllowance.prototype.getSubtractedValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.DecreaseAllowance} returns this
 */
proto.DecreaseAllowance.prototype.setSubtractedValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransferFrom.prototype.toObject = function(opt_includeInstance) {
  return proto.TransferFrom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransferFrom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferFrom.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    toAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransferFrom}
 */
proto.TransferFrom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransferFrom;
  return proto.TransferFrom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransferFrom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransferFrom}
 */
proto.TransferFrom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransferFrom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransferFrom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransferFrom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferFrom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string from_address = 1;
 * @return {string}
 */
proto.TransferFrom.prototype.getFromAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransferFrom} returns this
 */
proto.TransferFrom.prototype.setFromAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to_address = 2;
 * @return {string}
 */
proto.TransferFrom.prototype.getToAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransferFrom} returns this
 */
proto.TransferFrom.prototype.setToAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 amount = 3;
 * @return {number}
 */
proto.TransferFrom.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.TransferFrom} returns this
 */
proto.TransferFrom.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Burn.prototype.toObject = function(opt_includeInstance) {
  return proto.Burn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Burn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Burn.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Burn}
 */
proto.Burn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Burn;
  return proto.Burn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Burn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Burn}
 */
proto.Burn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Burn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Burn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Burn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Burn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 amount = 1;
 * @return {number}
 */
proto.Burn.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Burn} returns this
 */
proto.Burn.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Join.prototype.toObject = function(opt_includeInstance) {
  return proto.Join.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Join} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Join.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    username: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Join}
 */
proto.Join.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Join;
  return proto.Join.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Join} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Join}
 */
proto.Join.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Join.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Join.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Join} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Join.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.Join.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Join} returns this
 */
proto.Join.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.Join.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Join} returns this
 */
proto.Join.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PrimitiveHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.PrimitiveHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PrimitiveHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PrimitiveHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: msg.getSignature_asB64(),
    publickey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    random: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PrimitiveHeader}
 */
proto.PrimitiveHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PrimitiveHeader;
  return proto.PrimitiveHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PrimitiveHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PrimitiveHeader}
 */
proto.PrimitiveHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublickey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRandom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PrimitiveHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PrimitiveHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PrimitiveHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PrimitiveHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPublickey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRandom();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bytes signature = 1;
 * @return {!(string|Uint8Array)}
 */
proto.PrimitiveHeader.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes signature = 1;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.PrimitiveHeader.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.PrimitiveHeader.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.PrimitiveHeader} returns this
 */
proto.PrimitiveHeader.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string publicKey = 2;
 * @return {string}
 */
proto.PrimitiveHeader.prototype.getPublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PrimitiveHeader} returns this
 */
proto.PrimitiveHeader.prototype.setPublickey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 random = 3;
 * @return {number}
 */
proto.PrimitiveHeader.prototype.getRandom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PrimitiveHeader} returns this
 */
proto.PrimitiveHeader.prototype.setRandom = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Primitive.oneofGroups_ = [[10,11,12,13,14,15,16,17,18,19]];

/**
 * @enum {number}
 */
proto.Primitive.PrimitiveCase = {
  PRIMITIVE_NOT_SET: 0,
  CONSTRUCT: 10,
  MINT: 11,
  TRANSFER: 12,
  JOIN: 13,
  APPROVE: 14,
  INCREASE_ALLOWANCE: 15,
  DECREASE_ALLOWANCE: 16,
  TRANSFER_FROM: 17,
  BURN: 18,
  MINT_TO: 19
};

/**
 * @return {proto.Primitive.PrimitiveCase}
 */
proto.Primitive.prototype.getPrimitiveCase = function() {
  return /** @type {proto.Primitive.PrimitiveCase} */(jspb.Message.computeOneofCase(this, proto.Primitive.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Primitive.prototype.toObject = function(opt_includeInstance) {
  return proto.Primitive.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Primitive} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Primitive.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.PrimitiveHeader.toObject(includeInstance, f),
    construct: (f = msg.getConstruct()) && proto.Construct.toObject(includeInstance, f),
    mint: (f = msg.getMint()) && proto.Mint.toObject(includeInstance, f),
    transfer: (f = msg.getTransfer()) && proto.Transfer.toObject(includeInstance, f),
    join: (f = msg.getJoin()) && proto.Join.toObject(includeInstance, f),
    approve: (f = msg.getApprove()) && proto.Approve.toObject(includeInstance, f),
    increaseAllowance: (f = msg.getIncreaseAllowance()) && proto.IncreaseAllowance.toObject(includeInstance, f),
    decreaseAllowance: (f = msg.getDecreaseAllowance()) && proto.DecreaseAllowance.toObject(includeInstance, f),
    transferFrom: (f = msg.getTransferFrom()) && proto.TransferFrom.toObject(includeInstance, f),
    burn: (f = msg.getBurn()) && proto.Burn.toObject(includeInstance, f),
    mintTo: (f = msg.getMintTo()) && proto.MintTo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Primitive}
 */
proto.Primitive.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Primitive;
  return proto.Primitive.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Primitive} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Primitive}
 */
proto.Primitive.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PrimitiveHeader;
      reader.readMessage(value,proto.PrimitiveHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 10:
      var value = new proto.Construct;
      reader.readMessage(value,proto.Construct.deserializeBinaryFromReader);
      msg.setConstruct(value);
      break;
    case 11:
      var value = new proto.Mint;
      reader.readMessage(value,proto.Mint.deserializeBinaryFromReader);
      msg.setMint(value);
      break;
    case 12:
      var value = new proto.Transfer;
      reader.readMessage(value,proto.Transfer.deserializeBinaryFromReader);
      msg.setTransfer(value);
      break;
    case 13:
      var value = new proto.Join;
      reader.readMessage(value,proto.Join.deserializeBinaryFromReader);
      msg.setJoin(value);
      break;
    case 14:
      var value = new proto.Approve;
      reader.readMessage(value,proto.Approve.deserializeBinaryFromReader);
      msg.setApprove(value);
      break;
    case 15:
      var value = new proto.IncreaseAllowance;
      reader.readMessage(value,proto.IncreaseAllowance.deserializeBinaryFromReader);
      msg.setIncreaseAllowance(value);
      break;
    case 16:
      var value = new proto.DecreaseAllowance;
      reader.readMessage(value,proto.DecreaseAllowance.deserializeBinaryFromReader);
      msg.setDecreaseAllowance(value);
      break;
    case 17:
      var value = new proto.TransferFrom;
      reader.readMessage(value,proto.TransferFrom.deserializeBinaryFromReader);
      msg.setTransferFrom(value);
      break;
    case 18:
      var value = new proto.Burn;
      reader.readMessage(value,proto.Burn.deserializeBinaryFromReader);
      msg.setBurn(value);
      break;
    case 19:
      var value = new proto.MintTo;
      reader.readMessage(value,proto.MintTo.deserializeBinaryFromReader);
      msg.setMintTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Primitive.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Primitive.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Primitive} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Primitive.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PrimitiveHeader.serializeBinaryToWriter
    );
  }
  f = message.getConstruct();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Construct.serializeBinaryToWriter
    );
  }
  f = message.getMint();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.Mint.serializeBinaryToWriter
    );
  }
  f = message.getTransfer();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.Transfer.serializeBinaryToWriter
    );
  }
  f = message.getJoin();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.Join.serializeBinaryToWriter
    );
  }
  f = message.getApprove();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.Approve.serializeBinaryToWriter
    );
  }
  f = message.getIncreaseAllowance();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.IncreaseAllowance.serializeBinaryToWriter
    );
  }
  f = message.getDecreaseAllowance();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.DecreaseAllowance.serializeBinaryToWriter
    );
  }
  f = message.getTransferFrom();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.TransferFrom.serializeBinaryToWriter
    );
  }
  f = message.getBurn();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.Burn.serializeBinaryToWriter
    );
  }
  f = message.getMintTo();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.MintTo.serializeBinaryToWriter
    );
  }
};


/**
 * optional PrimitiveHeader header = 1;
 * @return {?proto.PrimitiveHeader}
 */
proto.Primitive.prototype.getHeader = function() {
  return /** @type{?proto.PrimitiveHeader} */ (
    jspb.Message.getWrapperField(this, proto.PrimitiveHeader, 1));
};


/**
 * @param {?proto.PrimitiveHeader|undefined} value
 * @return {!proto.Primitive} returns this
*/
proto.Primitive.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Primitive} returns this
 */
proto.Primitive.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Primitive.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Construct construct = 10;
 * @return {?proto.Construct}
 */
proto.Primitive.prototype.getConstruct = function() {
  return /** @type{?proto.Construct} */ (
    jspb.Message.getWrapperField(this, proto.Construct, 10));
};


/**
 * @param {?proto.Construct|undefined} value
 * @return {!proto.Primitive} returns this
*/
proto.Primitive.prototype.setConstruct = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.Primitive.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Primitive} returns this
 */
proto.Primitive.prototype.clearConstruct = function() {
  return this.setConstruct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Primitive.prototype.hasConstruct = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Mint mint = 11;
 * @return {?proto.Mint}
 */
proto.Primitive.prototype.getMint = function() {
  return /** @type{?proto.Mint} */ (
    jspb.Message.getWrapperField(this, proto.Mint, 11));
};


/**
 * @param {?proto.Mint|undefined} value
 * @return {!proto.Primitive} returns this
*/
proto.Primitive.prototype.setMint = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.Primitive.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Primitive} returns this
 */
proto.Primitive.prototype.clearMint = function() {
  return this.setMint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Primitive.prototype.hasMint = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Transfer transfer = 12;
 * @return {?proto.Transfer}
 */
proto.Primitive.prototype.getTransfer = function() {
  return /** @type{?proto.Transfer} */ (
    jspb.Message.getWrapperField(this, proto.Transfer, 12));
};


/**
 * @param {?proto.Transfer|undefined} value
 * @return {!proto.Primitive} returns this
*/
proto.Primitive.prototype.setTransfer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.Primitive.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Primitive} returns this
 */
proto.Primitive.prototype.clearTransfer = function() {
  return this.setTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Primitive.prototype.hasTransfer = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Join join = 13;
 * @return {?proto.Join}
 */
proto.Primitive.prototype.getJoin = function() {
  return /** @type{?proto.Join} */ (
    jspb.Message.getWrapperField(this, proto.Join, 13));
};


/**
 * @param {?proto.Join|undefined} value
 * @return {!proto.Primitive} returns this
*/
proto.Primitive.prototype.setJoin = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.Primitive.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Primitive} returns this
 */
proto.Primitive.prototype.clearJoin = function() {
  return this.setJoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Primitive.prototype.hasJoin = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Approve approve = 14;
 * @return {?proto.Approve}
 */
proto.Primitive.prototype.getApprove = function() {
  return /** @type{?proto.Approve} */ (
    jspb.Message.getWrapperField(this, proto.Approve, 14));
};


/**
 * @param {?proto.Approve|undefined} value
 * @return {!proto.Primitive} returns this
*/
proto.Primitive.prototype.setApprove = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.Primitive.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Primitive} returns this
 */
proto.Primitive.prototype.clearApprove = function() {
  return this.setApprove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Primitive.prototype.hasApprove = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional IncreaseAllowance increase_allowance = 15;
 * @return {?proto.IncreaseAllowance}
 */
proto.Primitive.prototype.getIncreaseAllowance = function() {
  return /** @type{?proto.IncreaseAllowance} */ (
    jspb.Message.getWrapperField(this, proto.IncreaseAllowance, 15));
};


/**
 * @param {?proto.IncreaseAllowance|undefined} value
 * @return {!proto.Primitive} returns this
*/
proto.Primitive.prototype.setIncreaseAllowance = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.Primitive.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Primitive} returns this
 */
proto.Primitive.prototype.clearIncreaseAllowance = function() {
  return this.setIncreaseAllowance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Primitive.prototype.hasIncreaseAllowance = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional DecreaseAllowance decrease_allowance = 16;
 * @return {?proto.DecreaseAllowance}
 */
proto.Primitive.prototype.getDecreaseAllowance = function() {
  return /** @type{?proto.DecreaseAllowance} */ (
    jspb.Message.getWrapperField(this, proto.DecreaseAllowance, 16));
};


/**
 * @param {?proto.DecreaseAllowance|undefined} value
 * @return {!proto.Primitive} returns this
*/
proto.Primitive.prototype.setDecreaseAllowance = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.Primitive.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Primitive} returns this
 */
proto.Primitive.prototype.clearDecreaseAllowance = function() {
  return this.setDecreaseAllowance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Primitive.prototype.hasDecreaseAllowance = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional TransferFrom transfer_from = 17;
 * @return {?proto.TransferFrom}
 */
proto.Primitive.prototype.getTransferFrom = function() {
  return /** @type{?proto.TransferFrom} */ (
    jspb.Message.getWrapperField(this, proto.TransferFrom, 17));
};


/**
 * @param {?proto.TransferFrom|undefined} value
 * @return {!proto.Primitive} returns this
*/
proto.Primitive.prototype.setTransferFrom = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.Primitive.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Primitive} returns this
 */
proto.Primitive.prototype.clearTransferFrom = function() {
  return this.setTransferFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Primitive.prototype.hasTransferFrom = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional Burn burn = 18;
 * @return {?proto.Burn}
 */
proto.Primitive.prototype.getBurn = function() {
  return /** @type{?proto.Burn} */ (
    jspb.Message.getWrapperField(this, proto.Burn, 18));
};


/**
 * @param {?proto.Burn|undefined} value
 * @return {!proto.Primitive} returns this
*/
proto.Primitive.prototype.setBurn = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.Primitive.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Primitive} returns this
 */
proto.Primitive.prototype.clearBurn = function() {
  return this.setBurn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Primitive.prototype.hasBurn = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional MintTo mint_to = 19;
 * @return {?proto.MintTo}
 */
proto.Primitive.prototype.getMintTo = function() {
  return /** @type{?proto.MintTo} */ (
    jspb.Message.getWrapperField(this, proto.MintTo, 19));
};


/**
 * @param {?proto.MintTo|undefined} value
 * @return {!proto.Primitive} returns this
*/
proto.Primitive.prototype.setMintTo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.Primitive.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Primitive} returns this
 */
proto.Primitive.prototype.clearMintTo = function() {
  return this.setMintTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Primitive.prototype.hasMintTo = function() {
  return jspb.Message.getField(this, 19) != null;
};


goog.object.extend(exports, proto);
